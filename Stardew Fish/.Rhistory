shinyApp(ui, server)
p <- ggplot(genus_filtered_dataset, aes_string(x="species", y=input$y_var))+
theme(axis.text.x = element_text(angle=50, hjust=1)) +
labs(x="Species", y=input$y_var)
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Sex Specific Nest Building - Plotting"),
sidebarLayout(
sidebarPanel(
selectInput("master_input", "Select Plot Type",
choices = c("Plot distribution of nest_builder (sex)",
"Plot distribution of nest_builder (sex) against continuous variables",
"Differences between species of a genus"))
),
mainPanel(
uiOutput("additional_inputs"),
plotOutput("plot")
)
)
)
# define a server for the Shiny app
server <- function(input, output, session) {
# this stops the app upon closing
session$onSessionEnded(stopApp)
#changes UI by master_input
output$additional_inputs <- renderUI({
plot_type <- input$master_input
if (plot_type == "Plot distribution of nest_builder (sex)") {
tagList(
selectInput("fill_var", "Select fill variable:", choices=c("nest_site", "nest_structure", "incubating_sex"), selected = "nest_site")
)
} else if (plot_type == "Plot distribution of nest_builder (sex) against continuous variables") {
tagList(
selectInput("y_var", "Select y variable:", choices=c("clutch_size_mean", "length_breeding", "latitude_mean"), selected = "clutch_size_mean")
)
} else if (plot_type == "Differences between species of a genus") {
tagList(
selectInput("genus", "Select genus:", choices=large_genuses, selected = "Sylvia"),
selectInput("y_var", "Select y variable:", choices=c("nest_builder", "nest_site", "nest_structure", "incubating_sex", "clutch_size_mean", "length_breeding", "latitude_mean"), selected = "nest_builder")
)
}
})
# fill in the spot we created for a plot
output$plot <- renderPlot({
plot_type <- input$master_input
if (plot_type == "Plot distribution of nest_builder (sex)") {
dataset %>%
ggplot(aes_string(x="nest_builder", fill=input$fill_var))+
geom_bar(position = "dodge") +
theme(axis.text.x = element_text(angle=50, hjust=1)) +
labs(x="Sex",
y="Count", fill="Fill by") +
scale_fill_brewer(palette="BrBG")
} else if (plot_type == "Plot distribution of nest_builder (sex) against continuous variables") {
dataset %>%
ggplot(aes_string(x="nest_builder", y=input$y_var))+
geom_boxplot() +
theme(axis.text.x = element_text(angle=50, hjust=1)) +
labs(x="Sex",
y=input$y_var) +
scale_fill_brewer(palette="BrBG")
} else if (plot_type == "Differences between species of a genus") {
genus_filtered_dataset <- filter(dataset, genus == input$genus)
p <- ggplot(genus_filtered_dataset, aes_string(x="species", y=input$y_var))+
theme(axis.text.x = element_text(angle=50, hjust=1)) +
labs(x="Species", y=input$y_var) +
scale_fill_brewer(palette="BrBG")
if (input$y_var %in% c("nest_builder", "nest_site", "nest_structure", "incubating_sex")) {
p <- p+geom_count()
} else if (input$y_var %in% c("clutch_size_mean", "length_breeding", "latitude_mean")) {
p <- p+geom_col()
}
p+scale_fill_brewer(palette="BrBG")
}
})
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Sex Specific Nest Building - Plotting"),
sidebarLayout(
sidebarPanel(
selectInput("master_input", "Select Plot Type",
choices = c("Plot distribution of nest_builder (sex)",
"Plot distribution of nest_builder (sex) against continuous variables",
"Differences between species of a genus"))
),
mainPanel(
uiOutput("additional_inputs"),
plotOutput("plot")
)
)
)
# define a server for the Shiny app
server <- function(input, output, session) {
# this stops the app upon closing
session$onSessionEnded(stopApp)
#changes UI by master_input
output$additional_inputs <- renderUI({
plot_type <- input$master_input
if (plot_type == "Plot distribution of nest_builder (sex)") {
tagList(
selectInput("fill_var", "Select fill variable:", choices=c("nest_site", "nest_structure", "incubating_sex"), selected = "nest_site")
)
} else if (plot_type == "Plot distribution of nest_builder (sex) against continuous variables") {
tagList(
selectInput("y_var", "Select y variable:", choices=c("clutch_size_mean", "length_breeding", "latitude_mean"), selected = "clutch_size_mean")
)
} else if (plot_type == "Differences between species of a genus") {
tagList(
selectInput("genus", "Select genus:", choices=large_genuses, selected = "Sylvia"),
selectInput("y_var", "Select y variable:", choices=c("nest_builder", "nest_site", "nest_structure", "incubating_sex", "clutch_size_mean", "length_breeding", "latitude_mean"), selected = "nest_builder")
)
}
})
# fill in the spot we created for a plot
output$plot <- renderPlot({
plot_type <- input$master_input
if (plot_type == "Plot distribution of nest_builder (sex)") {
dataset %>%
ggplot(aes_string(x="nest_builder", fill=input$fill_var))+
geom_bar(position = "dodge") +
theme(axis.text.x = element_text(angle=50, hjust=1)) +
labs(x="Sex",
y="Count", fill="Fill by") +
scale_fill_brewer(palette="BrBG")
} else if (plot_type == "Plot distribution of nest_builder (sex) against continuous variables") {
dataset %>%
ggplot(aes_string(x="nest_builder", y=input$y_var))+
geom_boxplot() +
theme(axis.text.x = element_text(angle=50, hjust=1)) +
labs(x="Sex",
y=input$y_var) +
scale_fill_brewer(palette="BrBG")
} else if (plot_type == "Differences between species of a genus") {
genus_filtered_dataset <- filter(dataset, genus == input$genus)
p <- ggplot(genus_filtered_dataset, aes_string(x="species", y=input$y_var, fill="#a6611a"))+
theme(axis.text.x = element_text(angle=50, hjust=1)) +
labs(x="Species", y=input$y_var)
if (input$y_var %in% c("nest_builder", "nest_site", "nest_structure", "incubating_sex")) {
p <- p+geom_count()
} else if (input$y_var %in% c("clutch_size_mean", "length_breeding", "latitude_mean")) {
p <- p+geom_col()
}
p
}
})
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Sex Specific Nest Building - Plotting"),
sidebarLayout(
sidebarPanel(
selectInput("master_input", "Select Plot Type",
choices = c("Plot distribution of nest_builder (sex)",
"Plot distribution of nest_builder (sex) against continuous variables",
"Differences between species of a genus"))
),
mainPanel(
uiOutput("additional_inputs"),
plotOutput("plot")
)
)
)
# define a server for the Shiny app
server <- function(input, output, session) {
# this stops the app upon closing
session$onSessionEnded(stopApp)
#changes UI by master_input
output$additional_inputs <- renderUI({
plot_type <- input$master_input
if (plot_type == "Plot distribution of nest_builder (sex)") {
tagList(
selectInput("fill_var", "Select fill variable:", choices=c("nest_site", "nest_structure", "incubating_sex"), selected = "nest_site")
)
} else if (plot_type == "Plot distribution of nest_builder (sex) against continuous variables") {
tagList(
selectInput("y_var", "Select y variable:", choices=c("clutch_size_mean", "length_breeding", "latitude_mean"), selected = "clutch_size_mean")
)
} else if (plot_type == "Differences between species of a genus") {
tagList(
selectInput("genus", "Select genus:", choices=large_genuses, selected = "Sylvia"),
selectInput("y_var", "Select y variable:", choices=c("nest_builder", "nest_site", "nest_structure", "incubating_sex", "clutch_size_mean", "length_breeding", "latitude_mean"), selected = "nest_builder")
)
}
})
# fill in the spot we created for a plot
output$plot <- renderPlot({
plot_type <- input$master_input
if (plot_type == "Plot distribution of nest_builder (sex)") {
dataset %>%
ggplot(aes_string(x="nest_builder", fill=input$fill_var))+
geom_bar(position = "dodge") +
theme(axis.text.x = element_text(angle=50, hjust=1)) +
labs(x="Sex",
y="Count", fill="Fill by") +
scale_fill_brewer(palette="BrBG")
} else if (plot_type == "Plot distribution of nest_builder (sex) against continuous variables") {
dataset %>%
ggplot(aes_string(x="nest_builder", y=input$y_var))+
geom_boxplot() +
theme(axis.text.x = element_text(angle=50, hjust=1)) +
labs(x="Sex",
y=input$y_var) +
scale_fill_brewer(palette="BrBG")
} else if (plot_type == "Differences between species of a genus") {
genus_filtered_dataset <- filter(dataset, genus == input$genus)
p <- ggplot(genus_filtered_dataset, aes_string(x="species", y=input$y_var))+
theme(axis.text.x = element_text(angle=50, hjust=1)) +
labs(x="Species", y=input$y_var)
if (input$y_var %in% c("nest_builder", "nest_site", "nest_structure", "incubating_sex")) {
p <- p+geom_count()
} else if (input$y_var %in% c("clutch_size_mean", "length_breeding", "latitude_mean")) {
p <- p+geom_col()
}
p
}
})
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Sex Specific Nest Building - Plotting"),
sidebarLayout(
sidebarPanel(
selectInput("master_input", "Select Plot Type",
choices = c("Plot distribution of nest_builder (sex)",
"Plot distribution of nest_builder (sex) against continuous variables",
"Differences between species of a genus"))
),
mainPanel(
uiOutput("additional_inputs"),
plotOutput("plot")
)
)
)
# define a server for the Shiny app
server <- function(input, output, session) {
# this stops the app upon closing
session$onSessionEnded(stopApp)
#changes UI by master_input
output$additional_inputs <- renderUI({
plot_type <- input$master_input
if (plot_type == "Plot distribution of nest_builder (sex)") {
tagList(
selectInput("fill_var", "Select fill variable:", choices=c("nest_site", "nest_structure", "incubating_sex"), selected = "nest_site")
)
} else if (plot_type == "Plot distribution of nest_builder (sex) against continuous variables") {
tagList(
selectInput("y_var", "Select y variable:", choices=c("clutch_size_mean", "length_breeding", "latitude_mean"), selected = "clutch_size_mean")
)
} else if (plot_type == "Differences between species of a genus") {
tagList(
selectInput("genus", "Select genus:", choices=large_genuses, selected = "Sylvia"),
selectInput("y_var", "Select y variable:", choices=c("nest_builder", "nest_site", "nest_structure", "incubating_sex", "clutch_size_mean", "length_breeding", "latitude_mean"), selected = "nest_builder")
)
}
})
# fill in the spot we created for a plot
output$plot <- renderPlot({
plot_type <- input$master_input
if (plot_type == "Plot distribution of nest_builder (sex)") {
dataset %>%
ggplot(aes_string(x="nest_builder", fill=input$fill_var))+
geom_bar(position = "dodge") +
theme(axis.text.x = element_text(angle=50, hjust=1)) +
labs(x="Sex",
y="Count", fill="Fill by") +
scale_fill_brewer(palette="BrBG")
} else if (plot_type == "Plot distribution of nest_builder (sex) against continuous variables") {
dataset %>%
ggplot(aes_string(x="nest_builder", y=input$y_var))+
geom_boxplot() +
theme(axis.text.x = element_text(angle=50, hjust=1)) +
labs(x="Sex",
y=input$y_var) +
scale_fill_brewer(palette="BrBG")
} else if (plot_type == "Differences between species of a genus") {
genus_filtered_dataset <- filter(dataset, genus == input$genus)
p <- ggplot(genus_filtered_dataset, aes_string(x="species", y=input$y_var))+
theme(axis.text.x = element_text(angle=50, hjust=1)) +
labs(x="Species", y=input$y_var)
if (input$y_var %in% c("nest_builder", "nest_site", "nest_structure", "incubating_sex")) {
p <- p+geom_count(fill="#a6611a")
} else if (input$y_var %in% c("clutch_size_mean", "length_breeding", "latitude_mean")) {
p <- p+geom_col(fill="#a6611a")
}
p
}
})
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Sex Specific Nest Building - Plotting"),
sidebarLayout(
sidebarPanel(
selectInput("master_input", "Select Plot Type",
choices = c("Plot distribution of nest_builder (sex)",
"Plot distribution of nest_builder (sex) against continuous variables",
"Differences between species of a genus"))
),
mainPanel(
uiOutput("additional_inputs"),
plotOutput("plot")
)
)
)
# define a server for the Shiny app
server <- function(input, output, session) {
# this stops the app upon closing
session$onSessionEnded(stopApp)
#changes UI by master_input
output$additional_inputs <- renderUI({
plot_type <- input$master_input
if (plot_type == "Plot distribution of nest_builder (sex)") {
tagList(
selectInput("fill_var", "Select fill variable:", choices=c("nest_site", "nest_structure", "incubating_sex"), selected = "nest_site")
)
} else if (plot_type == "Plot distribution of nest_builder (sex) against continuous variables") {
tagList(
selectInput("y_var", "Select y variable:", choices=c("clutch_size_mean", "length_breeding", "latitude_mean"), selected = "clutch_size_mean")
)
} else if (plot_type == "Differences between species of a genus") {
tagList(
selectInput("genus", "Select genus:", choices=large_genuses, selected = "Sylvia"),
selectInput("y_var", "Select y variable:", choices=c("nest_builder", "nest_site", "nest_structure", "incubating_sex", "clutch_size_mean", "length_breeding", "latitude_mean"), selected = "nest_builder")
)
}
})
# fill in the spot we created for a plot
output$plot <- renderPlot({
plot_type <- input$master_input
if (plot_type == "Plot distribution of nest_builder (sex)") {
dataset %>%
ggplot(aes_string(x="nest_builder", fill=input$fill_var))+
geom_bar(position = "dodge") +
theme(axis.text.x = element_text(angle=50, hjust=1)) +
labs(x="Sex",
y="Count", fill="Fill by") +
scale_fill_brewer(palette="BrBG")
} else if (plot_type == "Plot distribution of nest_builder (sex) against continuous variables") {
dataset %>%
ggplot(aes_string(x="nest_builder", y=input$y_var))+
geom_boxplot() +
theme(axis.text.x = element_text(angle=50, hjust=1)) +
labs(x="Sex",
y=input$y_var) +
scale_fill_brewer(palette="BrBG")
} else if (plot_type == "Differences between species of a genus") {
genus_filtered_dataset <- filter(dataset, genus == input$genus)
p <- ggplot(genus_filtered_dataset, aes_string(x="species", y=input$y_var))+
theme(axis.text.x = element_text(angle=50, hjust=1)) +
labs(x="Species", y=input$y_var)
if (input$y_var %in% c("nest_builder", "nest_site", "nest_structure", "incubating_sex")) {
p <- p+geom_count()
} else if (input$y_var %in% c("clutch_size_mean", "length_breeding", "latitude_mean")) {
p <- p+geom_col(fill="#a6611a")
}
p
}
})
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Stardew Fish Plotting"),
sidebarLayout(
sidebarPanel(
selectInput("master_input", "Select Plot Type",
choices = c("Plot Fish Type against Catch Time",
"Plot Fish Type against Sell Price"))
),
mainPanel(
uiOutput("additional_inputs"),
plotOutput("plot", width="800px", height="800px")
)
)
)
# define a server for the Shiny app
server <- function(input, output, session) {
# this stops the app upon closing
session$onSessionEnded(stopApp)
#changes UI by master_input
output$additional_inputs <- renderUI({
plot_type <- input$master_input
if (plot_type == "Plot Fish Type against Catch Time") {
tagList(
checkboxGroupInput("selected_seasons", "Select season:",
choices = c("spring", "summer", "fall", "winter"),
selected = "spring"),
selectInput("location", "Select location:",
choices=c("All", unique(fish_df$location), "Ginger Island - All"), selected = "All")
)
} else if (plot_type == "Plot Fish Type against Sell Price") {
tagList(
checkboxInput("show_difficulty", "Show Difficulty", value = FALSE),
checkboxInput("show_experience", "Show Experience Points", value = FALSE)
)
}
})
# fill in the spot we created for a plot
output$plot <- renderPlot({
plot_type <- input$master_input
if (plot_type == "Plot Fish Type against Catch Time") {
if (length(input$selected_seasons) > 0) {
filter_expr <- paste(input$selected_seasons, "== TRUE", collapse = " | ")
filter_expr <- str_c("(", filter_expr, ")")
} else {
"Please select at least one variable."
}
times <- c("6am","7am","8am","9am","10am","11am","12pm","1pm","2pm","3pm","4pm","5pm","6pm","7pm","8pm","9pm","10pm","11pm","12am","1am","2am")
fish_df %>%
filter(!!rlang::parse_expr(filter_expr)) %>%
{if (input$location != "All") {
if (input$location == "Ginger Island - All") {
filter(., str_detect(location, "Ginger Island"))
} else filter(., location == input$location)
} else .} %>%
ggplot(aes(y=reorder(fish, desc(fish)),
xmin=start_time_hr, xmax=end_time_hr, color=weather))+
geom_linerange(linewidth=3)+
scale_color_manual(values = c("#FF9999", "#9999FF", "#FFFF99"))+
scale_x_continuous(breaks=0:20, labels=times, position="top")+
labs(title="Fish catching times", y="Fish", x="Time")+
theme(axis.text.x = element_text(size=10),
axis.text.y = element_text(size=18),
axis.title = element_text(size=15),
title = element_text(size=20))
} else if (plot_type == "Plot Fish Type against Sell Price") {
fish_df %>%
ggplot(aes(x=reorder(fish, desc(fish)), y=base_sell_price))+
geom_col(fill="blue")+
coord_flip()
}
})
}
shinyApp(ui, server)
library(tidyverse)
library(shiny)
library(shinydashboard)
library(shinythemes)
fish_df <- read_csv(file = "stardew_fish_tidy.csv")
ui <- fluidPage(
titlePanel("Stardew Fish Plotting"),
sidebarLayout(
sidebarPanel(
selectInput("master_input", "Select Plot Type",
choices = c("Plot Fish Type against Catch Time",
"Plot Fish Type against Sell Price"))
),
mainPanel(
uiOutput("additional_inputs"),
plotOutput("plot", width="800px", height="800px")
)
)
)
# define a server for the Shiny app
server <- function(input, output, session) {
# this stops the app upon closing
session$onSessionEnded(stopApp)
#changes UI by master_input
output$additional_inputs <- renderUI({
plot_type <- input$master_input
if (plot_type == "Plot Fish Type against Catch Time") {
tagList(
checkboxGroupInput("selected_seasons", "Select season:",
choices = c("spring", "summer", "fall", "winter"),
selected = "spring"),
selectInput("location", "Select location:",
choices=c("All", unique(fish_df$location), "Ginger Island - All"), selected = "All")
)
} else if (plot_type == "Plot Fish Type against Sell Price") {
tagList(
checkboxInput("show_difficulty", "Show Difficulty", value = FALSE),
checkboxInput("show_experience", "Show Experience Points", value = FALSE)
)
}
})
# fill in the spot we created for a plot
output$plot <- renderPlot({
plot_type <- input$master_input
if (plot_type == "Plot Fish Type against Catch Time") {
if (length(input$selected_seasons) > 0) {
filter_expr <- paste(input$selected_seasons, "== TRUE", collapse = " | ")
filter_expr <- str_c("(", filter_expr, ")")
} else {
"Please select at least one variable."
}
times <- c("6am","7am","8am","9am","10am","11am","12pm","1pm","2pm","3pm","4pm","5pm","6pm","7pm","8pm","9pm","10pm","11pm","12am","1am","2am")
fish_df %>%
filter(!!rlang::parse_expr(filter_expr)) %>%
{if (input$location != "All") {
if (input$location == "Ginger Island - All") {
filter(., str_detect(location, "Ginger Island"))
} else filter(., location == input$location)
} else .} %>%
ggplot(aes(y=reorder(fish, desc(fish)),
xmin=start_time_hr, xmax=end_time_hr, color=weather))+
geom_linerange(linewidth=3)+
scale_color_manual(values = c("#FF9999", "#9999FF", "#FFFF99"))+
scale_x_continuous(breaks=0:20, labels=times, position="top")+
labs(title="Fish catching times", y="Fish", x="Time")+
theme(axis.text.x = element_text(size=10),
axis.text.y = element_text(size=18),
axis.title = element_text(size=15),
title = element_text(size=20))
} else if (plot_type == "Plot Fish Type against Sell Price") {
fish_df %>%
ggplot(aes(x=reorder(fish, desc(fish)), y=base_sell_price))+
geom_col(fill="blue")+
coord_flip()
}
})
}
shinyApp(ui, server)
